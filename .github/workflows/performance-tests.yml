name: Performance Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]


jobs:
  performance-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get full git history for performance comparison

      - name: Setup Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install Ghostscript
        run: |
          sudo apt-get update
          sudo apt-get install -y ghostscript
          gs --version

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Download previous performance history
        uses: actions/download-artifact@v4
        with:
          name: performance-history
          path: test/performance/
        continue-on-error: true # Don't fail if no previous history exists

      - name: Run performance tests
        run: npm run test:perf
        env:
          NODE_ENV: test

      - name: Generate performance report
        run: |
          echo "## Performance Test Results - Node.js LTS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f test/performance/performance-history.json ]; then
            echo "### Summary" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat test/performance/performance-history.json | jq '.summary' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Recent Results (Last 5)" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat test/performance/performance-history.json | jq '.results[-5:]' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "No performance history file found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload performance history
        uses: actions/upload-artifact@v4
        with:
          name: performance-history
          path: test/performance/performance-history.json
          retention-days: 90
        if: always()

      - name: Check for performance regression
        run: |
          if [ -f test/performance/performance-history.json ]; then
            node -e "
              const fs = require('fs');
              const history = JSON.parse(fs.readFileSync('test/performance/performance-history.json', 'utf8'));

              if (history.results.length < 2) {
                console.log('Not enough data for regression analysis');
                process.exit(0);
              }

              const results = history.results;
              const currentRun = results.slice(-1)[0];
              const previousRun = results.slice(-2, -1)[0];

              if (!currentRun || !previousRun) {
                console.log('Unable to compare runs');
                process.exit(0);
              }

              const currentAvg = currentRun.duration;
              const previousAvg = previousRun.duration;
              const regressionThreshold = 20; // 20% slower is considered a regression

              const changePercent = ((currentAvg - previousAvg) / previousAvg) * 100;

              console.log(\`Performance change: \${changePercent.toFixed(2)}%\`);

              if (changePercent > regressionThreshold) {
                console.error(\`‚ùå Performance regression detected: \${changePercent.toFixed(2)}% slower\`);
                console.error(\`Current: \${currentAvg.toFixed(2)}ms, Previous: \${previousAvg.toFixed(2)}ms\`);
                process.exit(1);
              } else if (changePercent < -5) {
                console.log(\`üéâ Performance improvement: \${Math.abs(changePercent).toFixed(2)}% faster\`);
              } else {
                console.log(\`‚úÖ Performance is stable\`);
              }
            "
          else
            echo "No performance history available for regression check"
          fi

      - name: Comment on PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (!fs.existsSync('test/performance/performance-history.json')) {
              console.log('No performance history found');
              return;
            }

            const history = JSON.parse(fs.readFileSync('test/performance/performance-history.json', 'utf8'));
            const summary = history.summary;

            const comment = `## üöÄ Performance Test Results (Node.js LTS)

            **Summary:**
            - Total tests: ${summary.totalTests}
            - Average duration: ${summary.averageDuration.toFixed(2)}ms
            - Fastest test: ${summary.fastestTest.filename} (${summary.fastestTest.duration.toFixed(2)}ms)
            - Slowest test: ${summary.slowestTest.filename} (${summary.slowestTest.duration.toFixed(2)}ms)

            **Last run:** ${summary.lastRun}

            <details>
            <summary>View detailed results</summary>

            \`\`\`json
            ${JSON.stringify(history.results.slice(-3), null, 2)}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Update README with performance table
        run: |
          if [ -f test/performance/performance-history.json ]; then
            # Generate performance table
            node -e "
              const fs = require('fs');
              const history = JSON.parse(fs.readFileSync('test/performance/performance-history.json', 'utf8'));

              if (history.results.length === 0) {
                console.log('No performance results to generate table');
                process.exit(0);
              }

              // Get last 10 results for the table
              const recentResults = history.results.slice(-10);
              const summary = history.summary;

              let table = '## Performance Results\n\n';
              table += 'Last updated: ' + summary.lastRun + '\n\n';
              table += '### Summary\n';
              table += '- **Total tests run**: ' + summary.totalTests + '\n';
              table += '- **Average duration**: ' + summary.averageDuration.toFixed(2) + 'ms\n';
              table += '- **Fastest test**: ' + summary.fastestTest.filename + ' (' + summary.fastestTest.duration.toFixed(2) + 'ms)\n';
              table += '- **Slowest test**: ' + summary.slowestTest.filename + ' (' + summary.slowestTest.duration.toFixed(2) + 'ms)\n\n';

              table += '### Recent Test Results\n\n';
              table += '| Date | File | Size (KB) | Duration (ms) | Valid | Commit |\n';
              table += '|------|------|-----------|---------------|-------|--------|\n';

              recentResults.forEach(result => {
                const date = new Date(result.timestamp).toISOString().split('T')[0];
                const sizeKB = (result.fileSize / 1024).toFixed(1);
                const shortCommit = result.gitCommit ? result.gitCommit.substring(0, 7) : 'unknown';
                const validIcon = result.isValid ? '‚úÖ' : '‚ùå';

                table += \`| \${date} | \${result.filename} | \${sizeKB} | \${result.duration.toFixed(2)} | \${validIcon} | \${shortCommit} |\n\`;
              });

              fs.writeFileSync('performance-table.md', table);
            "

            # Read the current README
            if [ -f README.md ]; then
              # Check if performance section already exists
              if grep -q '## Performance Results' README.md; then
                # Replace existing performance section
                awk '
                  /^## Performance Results/ { inSection = 1 }
                  /^## / && !/^## Performance Results/ && inSection { inSection = 0; print }
                  !inSection { print }
                  inSection && /^## Performance Results/ {
                    while ((getline line < \"performance-table.md\") > 0) {
                      print line
                    }
                    close(\"performance-table.md\")
                  }
                ' README.md > README_temp.md && mv README_temp.md README.md
              else
                # Append performance section at the end
                echo "" >> README.md
                cat performance-table.md >> README.md
              fi
            fi

            rm -f performance-table.md
          else
            echo "No performance history found, skipping README update"
          fi

      - name: Commit and push README changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet README.md; then
            echo "No changes to README.md"
          else
            git add README.md
            git commit -m "Update performance results in README [skip ci]"
            git push
          fi

